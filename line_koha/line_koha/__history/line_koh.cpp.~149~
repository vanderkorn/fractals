//$$---- Form CPP ----
//---------------------------------------------------------------------------

#include <vcl.h>
#pragma hdrstop

#include "line_koh.h"
//---------------------------------------------------------------------------
#pragma package(smart_init)
#pragma resource "*.dfm"
TForm1 *Form1;
//---------------------------------------------------------------------------
__fastcall TForm1::TForm1(TComponent* Owner)
	: TForm(Owner)
{
 	eps=1;
	DOrient=1;
}
//---------------------------------------------------------------------------
void __fastcall TForm1::ButtonGoClick(TObject *Sender)
{
    /*line.push_back(TPoint(10,60));
	line.push_back(TPoint(100,30));
	line.push_back(TPoint(250,200));*/

	MaxIter=StrToInt(EditIter->Text);
	int num=ComboBoxFract->ItemIndex;
	switch (num)
	{
	case 0:
		line.clear();
		line.push_back(TPoint(50,210));
		line.push_back(TPoint(150,10));
		line.push_back(TPoint(250,210));
		line.push_back(TPoint(50,210));
		line_koha_iter();
	break;
	case 1:
		line.clear();
		line.push_back(TPoint(50,210));
		line.push_back(TPoint(150,10));
		line.push_back(TPoint(250,210));
		line.push_back(TPoint(50,210));
		line_koha_rec_go();
	break;
	case 2:
		paporotnik_go();
	break;
	case 3:
		dragon_harter();
	break;
	}
}
//---------------------------------------------------------------------------
void TForm1::paporotnik_go()
{
	PicPaporotnik=new Graphics::TBitmap();
	PicPaporotnik->Width=200;
	PicPaporotnik->Height=200;

	/*	TPoint p1;
	TPoint p2;
	TPoint p3;
	TPoint p4;
	TPoint p5;

	double d=sqrt();
	double h0; */
	 TPoint p0=TPoint(100,0);
	k1=0.0483;
	k2=0.162;
	m1=0.371;
	m2=0.336;
	 m3=0.849;

	fi0=(14.9*M_PI)/180;
	fi1=(37.7*M_PI)/180;
	fi2=(36.8*M_PI)/180;
	fi3=(17.6*M_PI)/180;

	paporotnik(p0,200,(15*M_PI)/180,1, 0.5,MaxIter);

	ImageFract->Picture->Bitmap=PicPaporotnik;
	ImageFract->Refresh();

	
  
};
//---------------------------------------------------------------------------
void TForm1::paporotnik(TPoint p0,double h,double psi,int side, double eps,int rec)
{
	  if ((rec==0)||(k2*h<eps))
	  {
		   return;
	  }
	  TPoint p1;
	  TPoint p2;

	  p1.x=p0.x+k1*h*(-sin(psi));
	  p1.y=p0.y+k1*h*(cos(psi));

	  p2.x=p0.x+k2*h*(-sin(psi));
	  p2.y=p0.y+k2*h*(cos(psi));

	  PicPaporotnik->Canvas->MoveTo(p0.x,p0.y);
	  PicPaporotnik->Canvas->LineTo(p2.x,p2.y);

	  paporotnik(p1,m1*h,psi-side*(fi1+fi0),-side, eps,rec-1);
	  paporotnik(p2,m2*h,psi+side*(fi2+fi0),side, eps,rec-1);
	  paporotnik(p2,m3*h,psi-side*(fi3-fi0),side, eps,rec-1);
};
//---------------------------------------------------------------------------
vector<TPoint> TForm1::line_koha_rec(vector<TPoint> L,TPoint b,int DOrient,int rec)
{
	int ax=(L.end()-1)->x;
	int ay=(L.end()-1)->y;
	int Vx = (b.x-ax)/3;
	int Vy = (b.y-ay)/3;
	if ((rec==0)||((abs(3*Vx)<eps)&&(abs(3*Vy)<eps)))
	{
			L.push_back(b);
			return L;
	}
		TPoint c=TPoint(ax+Vx,ay+Vy);
		TPoint e=TPoint(c.x+0.5*(Vx+sqrt(3)*Vy*DOrient),c.y+0.5*(Vy-sqrt(3)*Vx*DOrient));
		TPoint d=TPoint(c.x+Vx,c.y+Vy);
		L=line_koha_rec(L,c,DOrient,rec-1);
		L=line_koha_rec(L,e,DOrient,rec-1);
		L =line_koha_rec(L,d,DOrient,rec-1);
		return	line_koha_rec(L,b,DOrient,rec-1);

};
 //---------------------------------------------------------------------------
  void TForm1::line_koha_rec_go()
 {
	Graphics::TBitmap* after=new Graphics::TBitmap();
	after->Width=300;
	after->Height=300;
	vector<TPoint> A;
	vector<TPoint> ::iterator p;
	for (p=line.begin(); p !=line.end()-1; p++)
	{
	A.push_back(*p);
	TPoint b=*(p+1);
	A=line_koha_rec(A,b,DOrient,MaxIter);
	int N=A.size();
	TPoint *z=new TPoint[N];
	vector <TPoint>::iterator s;
	int i=0;
	for (s=A.begin(); s!=A.end(); s++)
	{
			 z[i]=*s;
			 i++;
	}
	after->Canvas->Polyline(z,N-1) ;
	A.clear();
	}
	ImageFract->Picture->Bitmap=after;
	ImageFract->Refresh();
 };
//---------------------------------------------------------------------------
void TForm1::line_koha_iter()
{
	   bool flag;
	   int Count;
	   for (int i=0; i < MaxIter; i++)
	   {
			flag=false;
		   	points.clear();
			points.push_back(line[0]);
			Count= line.size();
		  // 	ShowMessage(Count);
			for (int j = 0; j < Count-1; j++)
			{
			   int Vx = (line[j+1].x-line[j].x)/3;
			   int Vy = (line[j+1].y-line[j].y)/3;
			   if (!((abs(3*Vx)<eps)&&(abs(3*Vy)<eps)))
			   {
					 TPoint c=TPoint(line[j].x+Vx,line[j].y+Vy);
					 TPoint e=TPoint(c.x+0.5*(Vx+sqrt(3)*Vy*DOrient),c.y+0.5*(Vy-sqrt(3)*Vx*DOrient));
					 TPoint d=TPoint(line[j+1].x-Vx,line[j+1].y-Vy);
					 points.push_back(c);
					 points.push_back(e);
					 points.push_back(d);
					 flag=true;
			   }
			   points.push_back(line[j+1]);
			}
		   line.clear();
			line=points;
			if (!flag)
			{
				  break;
			}
	   }
	   draw_fract();
};
//---------------------------------------------------------------------------
void TForm1::draw_fract()
{
		Graphics::TBitmap* after=new Graphics::TBitmap();
		after->Width=300;
		after->Height=300;
		int N=line.size();
		TPoint *a=new TPoint[N];
		vector <TPoint>::iterator p;
		int i=0;
		for (p=line.begin(); p!=line.end(); p++)
		{
			 a[i]=*p;
			 i++;
		}
		after->Canvas->Polyline(a,N-1) ;
		ImageFract->Picture->Bitmap=after;
		ImageFract->Refresh();
};
//---------------------------------------------------------------------------
 void TForm1::dragon_harter()
 {
	PicDragon=new Graphics::TBitmap();
	PicDragon->Width=300;
	PicDragon->Height=300;
   
   double x=150;
   double y=150;
   double ugol=M_PI/2;
   double dugol =M_PI/2;
   int d = 3;
   int c=pow(2.0,MaxIter);
   for(int i=1;i<=c;i++)
   {
	 lineto(x,y,d,ugol);
	 x=x+d*cos(ugol);
	 y=y-d*sin(ugol);
	 //ShowMessage(i);
	 //ShowMessage(orient(i));
	 ugol=ugol-dugol*orient(i);

   }

	ImageFract->Picture->Bitmap=PicDragon;
	ImageFract->Refresh();
 };
//---------------------------------------------------------------------------
void TForm1::lineto(double x,double y,double l,double u)
{
	  PicDragon->Canvas->MoveTo(RoundTo(x,0),RoundTo(y,0));
	  PicDragon->Canvas->LineTo(RoundTo(x+l*cos(u),0),RoundTo(y-l*sin(u),0));
};
//---------------------------------------------------------------------------
int TForm1::orient(int i)
{
 int ori;
 int j=i;

   //ShowMessage(fmod(j-1,4));
  // ShowMessage(fmod(j-3,4));
  int a=(int)fmod(j-1,4);
	int b=(int)fmod(j-3,4);
 if (a==0)
 {
		  ori=-1;
 }
 else
 {
		if (b==0)
		{
			   ori=1;
		}
		else
		{
			   j=j/2;
			   ori=orient(j);
 		}
 }
 return ori;
 };
//---------------------------------------------------------------------------

